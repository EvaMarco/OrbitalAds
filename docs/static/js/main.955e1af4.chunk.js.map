{"version":3,"sources":["images/mountains.png","components/Header.js","components/City.js","components/Filters.js","components/List.js","components/Selected.js","components/App.js","index.js"],"names":["module","exports","Header","className","City","props","city","src","logo","alt","name","lang","chineseName","Filters","getUserInput","htmlFor","type","id","placeholder","onChange","List","data","query","getSelectValue","selectedCities","allSelected","init","end","prevPage","nextPage","listPage","cities","filter","item","toUpperCase","includes","value","checked","length","slice","map","key","onClick","Math","ceil","Selected","clearAllSelected","clearSelected","initSelect","endSelect","prevPageSelect","nextPageSelect","selectPage","data-key","App","state","Data","bind","preInit","this","newInit","newEnd","newPage","setState","console","log","preEnd","event","inputValue","currentTarget","selectValue","setSelected","allArray","push","newCity","find","prevState","index","findIndex","newArray","splice","selectedCity","dataset","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.955e1af4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mountains.ac4b8758.png\";","import React from 'react';\nimport './Header.scss';\n\nconst Header = () => {\n    return (\n      <div className=\"header\">\n        <h1 className = \"header__title\">Cities of china</h1>\n      </div>\n    );\n}\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport logo from '../images/mountains.png';\nimport './City.scss';\n\nconst City = props => {\n  const {city} = props;\n  return (\n    <div className = \"city\">\n      <img className = \"city__logo\" src = {logo} alt = {city.name}/>\n      <div className = \"city__names\">\n        <div className = \"city__name\">{city.name}</div>\n        <div className = \"city__metadata\" lang=\"zh\">{city.chineseName}</div>\n      </div>\n    </div>\n  );\n}\nCity.propTypes = {\n  city: PropTypes.object.isRequired\n}\n\nexport default City;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Filters.scss'; \n\nconst Filters = props => {\n  const {getUserInput} = props;\n    return (\n      <div className = \"filters\">\n        <label htmlFor = \"filterByName\" className =\"filter__label\">FilterByName</label>\n        <input \n          type = \"text\" \n          name = \"filterByName\" \n          id = \"filterByName\" \n          className = \"input-text\" \n          placeholder = {'Search by name'}\n          onChange = {getUserInput}\n        />\n      </div>\n    );\n}\n\nFilters.propTypes = {\n  getUserInput: PropTypes.func.isRequired\n}\n\nexport default Filters;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport City from './City';\nimport Filters from './Filters';\nimport './List.scss';\n\nconst List = props => {\n  const {\n    data, \n    query, \n    getSelectValue, \n    getUserInput, \n    selectedCities, \n    allSelected, \n    init, \n    end, \n    prevPage,\n    nextPage, \n    listPage\n  } = props\n\n  const cities = data\n    .filter(item => {\n      return item.name.toUpperCase().includes(query.toUpperCase())\n      }\n    );\n    \n  return(\n    <div className=\"results\">\n      <Filters getUserInput = {getUserInput}/>\n      <div className=\"results__counter\">  \n        <input \n          className=\"checkbox__input results__checkbox\"\n          type=\"checkbox\" \n          name=\"all\" \n          id=\"all\" \n          value=\"all\"\n          onChange={getSelectValue}\n          checked = {allSelected === true}\n        />\n        <p className = \"results__counter-text\">{cities.length} items</p>\n      </div>\n      <ul className=\"city__list\">\n      {cities\n        .slice(init, end)\n        .map((item)=>{\n            return(\n              <li key={item.id} className=\"city__list-item\">\n                <label htmlFor={item.name} className = \"city__list-label\">\n                  <input \n                    key={item.id}\n                    className=\"checkbox__input\"\n                    type=\"checkbox\" \n                    name=\"city\" \n                    id={item.name} \n                    value={item.id} \n                    onChange={getSelectValue}\n                    checked = {selectedCities.filter(city => (city.name === item.name)).length === 1 }\n                  />\n                  <City city={item}/>  \n                </label>\n              </li>\n            )\n          }\n        )\n      }\n      </ul>\n      <div className=\"list__pages\">\n        <button className = \"btn prevPage__btn\" onClick = {prevPage}>\n        &lt;\n        </button>\n        <p className=\"list__page\">Page {listPage} of {Math.ceil(cities.length/20)}</p>\n        <button className = \"btn nextPage__btn\" onClick = {nextPage}>\n        &gt;\n        </button>\n      </div>\n    </div>\n  )\n}\n\nList.propTypes = {\n  getSelectValue: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired, \n  query: PropTypes.string.isRequired,\n  getUserInput: PropTypes.func.isRequired, \n  selectedCities: PropTypes.arrayOf(PropTypes.object).isRequired, \n  allSelected: PropTypes.bool, \n  init: PropTypes.number.isRequired, \n  end: PropTypes.number.isRequired, \n  prevPage: PropTypes.func.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  listPage: PropTypes.number.isRequired\n}\n\nexport default List;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport City from './City';\nimport './Selected.scss'; \n\nconst Selected = props => {\n  const {\n    clearAllSelected, \n    clearSelected, \n    selectedCities, \n    query,\n    initSelect, \n    endSelect, \n    prevPageSelect,\n    nextPageSelect, \n    selectPage\n  } = props;\n\n  const cities = selectedCities\n    .filter(item => {\n      return item.name.toUpperCase().includes(query.toUpperCase())\n      }\n    );\n    \n  return(\n    <div className=\"selected\">\n      <div className=\"clear__box\">\n        <p className=\"selected__items\">{cities.length} items</p>\n        <button \n          className=\"btn clear__btn\" \n          onClick = {clearAllSelected}\n        >\n          clear\n        </button>\n      </div>\n      <ul className=\"selected__list\">\n        {cities\n          .slice(initSelect, endSelect)\n          .map((item)=>{\n            return(\n              <li key={item.id} className=\"selected__list-city\">\n                <City city={item}/>  \n                <button \n                  data-key={item.id}\n                  className=\"btn delete__btn\" \n                  onClick = {clearSelected}\n                >\n                  x\n                </button>\n              </li>\n            )\n          })\n        }\n      </ul>\n      <div className=\"selected__pages\">\n        <button className = \"btn prevPage__btn\" onClick = {prevPageSelect}>\n        &lt;\n        </button>\n        <p className=\"list__page\">Page {selectPage}  of {Math.ceil(cities.length/20)}</p>\n        <button className = \"btn nextPage__btn\" onClick = {nextPageSelect}>\n        &gt;\n        </button>\n      </div>\n    </div>\n  )\n}\n\nSelected.propTypes = {\n  selectedCities: PropTypes.arrayOf(PropTypes.object).isRequired, \n  clearAllSelected: PropTypes.func.isRequired,\n  clearSelected: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired, \n  initSelect: PropTypes.number.isRequired, \n  endSelect: PropTypes.number.isRequired, \n  prevPageSelect: PropTypes.func.isRequired,\n  nextPageSelect: PropTypes.func.isRequired,\n  selectPage: PropTypes.number.isRequired\n}\n\nexport default Selected;","import React from 'react';\nimport Header from './Header';\nimport List from './List';\nimport Data from '../Data/cities-of-china.json';\nimport Selected from './Selected';\nimport './App.scss';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: Data.cities,\n      query: '',\n      selectedCities: [],\n      allSelected: false,  \n      init: 0, \n      end: 20, \n      initSelect: 0,\n      endSelect: 20,\n      listPage:1,\n      selectPage:1,\n    };\n    this.getUserInput = this.getUserInput.bind(this);\n    this.getSelectValue = this.getSelectValue.bind(this);\n    this.clearAllSelected = this.clearAllSelected.bind(this);\n    this.clearSelected = this.clearSelected.bind(this);\n    this.nextPage = this.nextPage.bind(this);\n    this.prevPage = this.prevPage.bind(this);\n    this.nextPageSelect = this.nextPageSelect.bind(this);\n    this.prevPageSelect = this.prevPageSelect.bind(this);\n  }\n  prevPage(){\n    const preInit = this.state.init;\n    if(this.state.listPage !== 1){\n      const newInit = preInit - 21;\n      const preEnd = this.state.end;\n      const newEnd = preEnd - 21;\n      const newPage = this.state.listPage - 1;\n      this.setState({\n        init: newInit, \n        end: newEnd,\n        listPage : newPage\n      });\n    }\n    else{\n      console.log('error'); \n    }\n  }\n  nextPage(){\n    const preEnd = this.state.end;\n    if(preEnd < this.state.data.filter((item => {\n      return item.name.toUpperCase().includes(this.state.query.toUpperCase())\n      })).length){\n      const preInit = this.state.init;\n      const newInit = preInit + 21;\n      const newEnd = preEnd + 21;\n      const newPage = this.state.listPage + 1;\n      this.setState({\n        init: newInit, \n        end: newEnd,\n        listPage: newPage\n      });\n    }\n    else{\n      console.log('error'); \n    }\n  }\n  prevPageSelect(){\n    const preInit = this.state.initSelect;\n    if(this.state.selectPage !== 1){\n      const newInit = preInit - 21;\n      const preEnd = this.state.endSelect;\n      const newEnd = preEnd - 21;\n      const newPage = this.state.selectPage - 1; \n      this.setState({\n        initSelect: newInit, \n        endSelect: newEnd,\n        selectPage: newPage\n      });\n    }\n    else{\n      console.log('error'); \n    }\n  }\n  nextPageSelect(){\n    const preEnd = this.state.endSelect;\n    if(preEnd < this.state.selectedCities.filter((item => {\n      return item.name.toUpperCase().includes(this.state.query.toUpperCase())\n      })).length){\n      const preInit = this.state.initSelect;\n      const newInit = preInit + 21;\n      const newEnd = preEnd + 21;\n      const newPage = this.state.selectPage + 1; \n      this.setState({\n        initSelect: newInit, \n        endSelect: newEnd, \n        selectPage: newPage\n      });\n    }\n    else{\n      console.log('error'); \n    }\n  }\n  getUserInput(event) {\n    const inputValue = event.currentTarget.value;\n    this.setState({ \n      query: inputValue,\n      init: 0, \n      end: 20, \n      initSelect: 0,\n      endSelect: 20,\n      listPage: 1, \n      selectPage: 1,\n      allSelected: false\n    });\n  }\n  getSelectValue(event) {\n    const selectValue = event.currentTarget.value;\n    this.setSelected(selectValue);\n  }\n  setSelected(city) {\n    if (city === \"all\") {\n      if (this.state.allSelected === true) {\n        this.setState({ selectedCities: [], allSelected: false })\n      }\n      else {\n        const allArray = []\n        for (let item of this.state.data.filter((item => {\n          return item.name.toUpperCase().includes(this.state.query.toUpperCase())\n          }))) {\n          allArray.push(item)\n        }\n        this.setState({ selectedCities: allArray, allSelected: true })\n      }\n    }\n    else {\n      if (this.state.selectedCities.length === 0) {\n        const newCity = this.state.data.find(item => item.id === city);\n        this.setState(prevState => ({\n          selectedCities: [...prevState.selectedCities, newCity]\n        }));\n      }\n      else if (this.state.allSelected === true) {\n        const index = this.state.selectedCities.findIndex(\n          item => item.id === city\n        );\n        const newArray = [...this.state.selectedCities];\n        newArray.splice(index, 1);\n        this.setState({ selectedCities: newArray, allSelected: false });\n      }\n      else {\n        if (this.state.selectedCities.find(item => item.id === city)) {\n          const index = this.state.selectedCities.findIndex(item => item.id === city);\n          const newArray = [...this.state.selectedCities];\n          newArray.splice(index, 1);\n          this.setState({ selectedCities: newArray });\n        }\n        else {\n          const selectedCity = this.state.data.find(item => item.id === city);\n          this.setState(prevState => ({\n            selectedCities: [...prevState.selectedCities, selectedCity]\n          }));\n        }\n      }\n    }\n  }\n  clearAllSelected() {\n    this.setState({ selectedCities: [], allSelected: false });\n  }\n  clearSelected(event) {\n    const key = event.currentTarget.dataset.key;\n    if (this.state.allSelected === true) {\n      const index = this.state.selectedCities.findIndex(\n        item => item.id === key\n      );\n      const newArray = [...this.state.selectedCities];\n      newArray.splice(index, 1);\n      this.setState({ selectedCities: newArray, allSelected: false });\n    }\n    else {\n      const index = this.state.selectedCities.findIndex(\n        item => item.id === key\n      );\n      const newArray = [...this.state.selectedCities];\n      newArray.splice(index, 1);\n      this.setState({ selectedCities: newArray });\n    }\n  }\n  render() {\n    const {\n      data, \n      query,  \n      selectedCities, \n      allSelected, \n      init, \n      end, \n      listPage, \n      initSelect, \n      endSelect, \n      selectPage\n    } = this.state\n    const {\n      prevPage,\n      nextPage, \n      getSelectValue, \n      getUserInput, \n      clearAllSelected, \n      clearSelected, \n      prevPageSelect,\n      nextPageSelect, \n    } = this\n    return (\n      <div className = \"App\">\n        <Header />\n        <div className = \"grid__container\">\n          <List\n            allSelected = {allSelected}\n            selectedCities = {selectedCities}\n            data = {data}\n            query = {query}\n            getSelectValue = {getSelectValue}\n            getUserInput = {getUserInput}\n            init = {init}\n            end = {end}\n            nextPage = {nextPage}\n            prevPage = {prevPage}\n            listPage = {listPage}\n          />\n          <Selected\n            query = {query}\n            clearAllSelected = {clearAllSelected}\n            clearSelected = {clearSelected}\n            selectedCities = {selectedCities}\n            initSelect = {initSelect}\n            endSelect = {endSelect}\n            nextPageSelect = {nextPageSelect}\n            prevPageSelect = {prevPageSelect}\n            selectPage = {selectPage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport {HashRouter} from 'react-router-dom';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));"],"sourceRoot":""}